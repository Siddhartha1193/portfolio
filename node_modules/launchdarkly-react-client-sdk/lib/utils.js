"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
/**
 * Transforms a set of flags so that their keys are camelCased. This function ignores
 * flag keys which start with `$`.
 *
 * @param rawFlags A mapping of flag keys and their values
 * @return A transformed `LDFlagSet` with camelCased flag keys
 */
exports.camelCaseKeys = function (rawFlags) {
    var flags = {};
    for (var rawFlag in rawFlags) {
        // Exclude system keys
        if (rawFlag.indexOf('$') !== 0) {
            flags[lodash_camelcase_1.default(rawFlag)] = rawFlags[rawFlag]; // tslint:disable-line:no-unsafe-any
        }
    }
    return flags;
};
/**
 * Gets the flags to pass to the provider from the changeset.
 *
 * @param changes the `LDFlagChangeset` from the ldClient onchange handler.
 * @param targetFlags if targetFlags are specified, changes to other flags are ignored and not returned in the
 * flattened `LDFlagSet`
 * @param reactOptions reactOptions.useCamelCaseFlagKeys determines whether to change the flag keys to camelCase
 * @return an `LDFlagSet` with the current flag values from the LDFlagChangeset filtered by `targetFlags`. The returned
 * object may be empty `{}` if none of the targetFlags were changed.
 */
exports.getFlattenedFlagsFromChangeset = function (changes, targetFlags, reactOptions) {
    var flattened = {};
    for (var key in changes) {
        if (!targetFlags || targetFlags[key] !== undefined) {
            // tslint:disable-next-line:no-unsafe-any
            var flagKey = reactOptions.useCamelCaseFlagKeys ? lodash_camelcase_1.default(key) : key;
            flattened[flagKey] = changes[key].current;
        }
    }
    return flattened;
};
/**
 * @deprecated The `camelCaseKeys.camelCaseKeys` property will be removed in a future version,
 * please update your code to use the `camelCaseKeys` function directly.
 */
// tslint:disable-next-line deprecation
exports.camelCaseKeys.camelCaseKeys = exports.camelCaseKeys;
exports.default = { camelCaseKeys: exports.camelCaseKeys, getFlattenedFlagsFromChangeset: exports.getFlattenedFlagsFromChangeset };
//# sourceMappingURL=utils.js.map